* Emacs lisp note
** Intro 

   #+BEGIN_SRC emacs-lisp
     2345.56456

     (+ 3 4 (- 8 3))

     (defun square (x) (* x x))
     (square 5)

     (defun add (a b) (+ a b))
     (add )
   #+END_SRC

** Variables, Booleans and Lists

   #+BEGIN_SRC emacs-lisp
     (setq my-var 5)
     (setq my-var1 3 my-varr2 4)

     (null nil) ;; => t
     (null t) ;; => nil

     ;; lists
     '(1 2 3 4)

     (setq my-list '(1 2 3 4))
     my-list ;; => (1 2 3 4)

     (add-to-list 'my-list 5)
     my-list ;; => (5 1 2 3 4)

     (cons 6 my-list) ;; => (6 5 1 2 3 4)
     my-list ;; => (5 1 2 3 4)

     ;;get the first of list
     (car my-list) ;; => 5
     ;;get the rest of list
     (cdr my-list) ;; => (1 2 3 4)
     ;;get by index
     (nth 0 my-list) ;; => 5
     (nth 3 my-list) ;; => 3

     ;;whether exist in list
     (member 3 my-list) ;; => (3 4)
     (member 7 my-list) ;; => nil

     (defun whether-exist (number some-list) (member number some-list))
     (whether-exist (2 my-list)) ;; => (2 3 4)

     ;;ert test
     (require 'ert)
     (ert-deftest check-number ()
       (should (whether-exist 5 '(3 5 6 7))) ;; => t
       (should (whether-exist 5 '(1 2 3 4))) ;; => t
       )
   #+END_SRC

** Looping and Local Variables

   #+BEGIN_SRC emacs-lisp
     ;; looping
     (setq my-list '(1 2 3 4))

     (dolist (num my-list)
       (when (= (mod num 2) 0)
	 (print num)))

     ;; variable not defined is nil
     (let (my-var)
       (if (null my-var)
	   (message "var is null")
	 (message "var is not null")
       ))


     (defun sum-evens (some-list)
       (let ((sum 0))
	 (dolist (num some-list)
	   (when (= (mod num 2) 0)
	     (setq sum (+ sum num))))
	 sum))
     (sum-evens my-list)
   #+END_SRC

** Interactive Functions

   #+BEGIN_SRC emacs-lisp
     (defun cheap-count-words ()
       (interactive)
       (let ((words 0))
	 (save-excursion
	   (goto-char (point-min))
	   (while (forward-word)
	     (setq words (1+ words))))
	 (message (format "words in buffer: %s" words))
	 words))
   #+END_SRC

* Writing GNU Emacs Extensions
** Customizing Emacs
   * What is emacs?
     #+BEGIN_SRC text
       It's missing the point to say that Emacs is just a programmable text editor. It's also, for instance, a C code editor. That may seem like nitpicking, but editing C code and editing text are two very different activities, and Emacs accommodates the differences by being two different editors. When editing code, you don't care about paragraph structure. When editing text, you don't care about indenting each line according to its syntax.

       Emacs is also a Lisp code editor. It's also a hexadecimal binary file editor. It's also a structured outline editor. It's also a directory editor, a tar file editor, an email editor, and a hundred others. Each kind of editor is an Emacs mode, a chunk of Lisp code that combines Emacs's primitive types and operations in some new way. Each mode is therefore an extension of Emacs, which means that when you strip away all those modes—when you remove the extensions and you're left with just the core of Emacs—you don't have any editors at all; you have the raw materials for making editors. You have an editor-builder.
     #+END_SRC
   * Binding keystrokes to commands,
     * such as (global-set-key keysequence command)
     * denoting key in Strings.
     * to get a special string, precede it with a backslash, such as double quote, some key abbreviation.
     * eg:"\M-x", "I said, \"hello, kinney\"".....
   * About lisp expression
     * If a symbol appears in the first position of a list, it's the name of the function to excute.
     * If it appears elsewhere, it's a variable whose value needs to be retrieved.
     * How to retrieve the value? use quote "'".
