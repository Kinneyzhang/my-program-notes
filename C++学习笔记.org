#+STARTUP:content
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://blog.geekinney.com/static/ostyle.css"/>
#+HTML_HEAD_extra: <link rel="stylesheet" type="text/css" href="https://blog.geekinney.com/static/ostyle2.css"/>
#+TITLE:C++ Primer
* 开始
** 一个简单的C++程序
   * g++ -o prog prog.cc
   * g++为编译器名称
   * -o指定编译生成的可执行的名称
   * unix系统的可执行文件没有后缀，windows为.exe
** 输入输出
   * C++标准输入输出库iostream，包括istream和ostream两个基本类型
   * cin、cout分别为标准输入输出类型的对象，此外还包括cerr、clog
   * std::cout << "hello emacs!" << std::endl
   * std::cin >> v1 << v2
   * endl是操纵符，作用是结束当前行和刷新缓冲区内容到设备中
   * std是命名空间，标准库定义的所有名字都在std命名空间中
   * "<<" 和 ">>"本质是运算符，前者将右侧内容写入到ostream的运算对象中，后者将istream对象接收到的内容写入右侧的对象中。
** 控制流
   * 当std::cin >> value作为while的条件时
     * 本质是检测流的状态
     * 当遇到文件结束符(windows:C-Z，unix系:C-D)或无效输入(变量类型不一致)时，条件为假，退出循环
** 类简介
   * 类定义了一个类型以及关联的一组操作
   * 标准头文件使用 =< >= ，自定义的头文件使用 =" "=
   * 书店程序？

* 变量和基本类型
** 基本内置类型
*** 算术类型
    * 不同类型所占的比特数在不同机器上有所差别。C++标准规定了最小尺寸。
    * 布尔类型的取值为 true 或 false
      
      | 类型        | 含义           | 最小尺寸     |
      |-------------+----------------+--------------|
      | bool        | 布尔类型       | 未定义       |
      | char        | 字符           | 8位          |
      | wchar_t     | 宽字符         | 16位         |
      | char16_t    | Unicode字符    | 16位         |
      | char32_t    | unicode字符    | 32位         |
      | short       | 短整型         | 16位         |
      | int         | 整型           | 16位         |
      | long        | 长整型         | 32位         |
      | long long   | 长整型         | 64位         |
      | float       | 单精度浮点型   | 6位有效数字  |
      | double      | 双精度浮点型   | 10位有效数字 |
      | long double | 拓展精度浮点型 | 10位有效数字 |

    * 在整型前面加"unsigned"可得到对应的无符号类型。
    * 字符型分为"char", "signed char", "unsigned char"三种。表现形式只有两种：带符号和无符号，"signed char"表现为哪种由编译器决定。
    * 无符号类型的所有比特用来存储值。带符号类型应近两年平衡正负值的数量。（一般为 -128~127）
    * 如何选择类型
      * 明确不为负时，选用无符号类型
      * 范围超过int时，使用long long
      * 算术运算中不要使用char或bool。需要表示不大的整数时，明确指定signed char或unsigned char。
      * 浮点运算通常选double，范围大，速度快。

*** 类型转换
    赋值转换规则:
    * 布尔 <= 非布尔，0为 *false* ，其余为 *true*
    * 非布尔 <= 布尔， *false* 为0， *true* 为1
    * 整型 <= 浮点型，仅保留整数部分
    * 浮点型 <= 整型，小数部分取0，整数超过浮点数容量，精度损失
    * 赋给无符号类型超过范围的值，结果是初始值对无符号类型取模后的余数
      * 例：-10赋给无符号数（int为32位）结果为 *2^32 - 10*
    * 赋给无符号类型超过范围的值，未定义
*** 字面值常量
    * 整型字面值
      * 十进制（带符号），八进制（可带可不带），十六进制（可带可不带）
      * 十进制字面值类型是所能容纳数值的 int, long, long long 中最小的。十进制负号不在字面值内。
      * 八进制和十六进制字面值类型是所能容纳数值的 int, unsigned init, long, unsigned long, long long, unsigned long long 中最小的。
    * 浮点型字面值
      * 用小数或科学计数法(E)表示
      * 默认类型为double，其他类型见表2.2(p37)
    * 字符字符串字面值
      * 字符字面值：单引号
      * 字符串字面值：双引号
	* 字符串字面值实际是常量字符构成的数组，结尾处添加 ='\0'= 空字符。
	* 两字符串字面值位置相邻且由空格、缩进和换行符分隔，实际是一个整体。
    * 转义序列
      | 含义       | 符号 | 含义       | 符号 |
      |------------+------+------------+------|
      | 换行符     | \n   | 纵向制表符 | \v   |
      | 反斜杠     | \\   | 回车符     | \r   |
      | 横向制表符 | \t   | 退格符     | \b   |
      | 问号       | \?   | 进纸符     | \f   |
      | 报警符     | \a   | 双引号     | \"   |
   
    * 指定字面值类型
      *字符和字符串字面值*
      | 前缀 | 含义                        | 类型     |
      |------+-----------------------------+----------|
      | u    | Unicode 16字符              | char16_t |
      | U    | Unicode 16字符              | char32_t |
      | L    | 宽字符                      | wchar_t  |
      | u8   | UTF-8(仅用于字符串字面常量) | char     |
   
      *整型字面值*
      | 后缀     | 最小匹配类型 |
      |----------+--------------|
      | u or U   | unsigned     |
      | l or L   | long         |
      | ll or LL | long long    |

      *浮点型字面值*
      | 后缀   | 类型        |
      |--------+-------------|
      | f or F | float       |
      | l or L | long double |
      
    * 布尔和指针字面值
      true和false是布尔字面值；nullptr是指针字面值
** 变量
*** 变量定义
    * 初始化和赋值不是一回事。初始化指创建变量是赋予了一个新的值；赋值指把对象当前的值擦出代以一个新的值。
    * 几种初始化方式

      #+BEGIN_SRC C++
      int units_sold = 0;
      int units_sold = {0};
      int units_sold {0};
      int units_sold (0);
      #+END_SRC
*** 变量声明和定义的关系    
    * 变量只能被定义一次，但可以被多次声明
    * 当需要在多个文件中使用同一个变量时，需要变量声明
    * 声明变量使用 =extern= 关键字
    * 不带 =extern= 关键字或赋了一个初值则为变量定义
    * 函数体内部不能初始化一个 =extern= 关键字变量
*** 标识符
    * 字母、数字、下划线组成，以字母或下划线开头，大小写敏感
    * 除去保留关键字、不能出现连续两个下划线或下划线连着大写字母。
    * 函数体外不能以下划线开头
*** 名字的作用域
    * C++中作用域一般以花括号分隔
    * 内层作用域可以访问外层作用域的变量
** 复合类型
*** 引用
    * 引用就是为对象起了另外一个名字
    * 引用本身不是一个对象
    * 形如： int i = 1024; int &r = i;
    * r称为i的引用
*** 指针
    * 与“引用”类似，可以对其他对象间接访问
    * 指针本身就是一个对象，允许赋值和拷贝
    * 在指针的生命周期内，可以先后指向几个不同的对象
    * 指针无需在定义时赋值，指针中存放某个对象的地址
**** 获取对象地址

     #+BEGIN_SRC C++
     int ival = 42;
     int *p = &ival;

     double dval;
     double *pd = &dval;
     double *dp2 = pd;

     int *pi = pd; //类型错误
     pi = &dval; //类型错误
     #+END_SRC
**** 指针值
     指针值应属于4种状态之一
     * 指向一个对象
     * 指向紧邻对象所占空间的下一个位置
     * 空指针，没有指向任何对象
     * 无效指针
**** 利用指针访问对象
     * 可以使用“解引用符”(*)访问指针指向的对象

       #+BEGIN_SRC C++
       int ival = 42;
       int *p = &ival;
       cout << *p; // 42

       *p = 0;
       cout << *p // 0
       #+END_SRC
**** 空指针
     三种定义方法：

     #+BEGIN_SRC C++
     int *p1 = nullptr;
     int *p2 = 0;
     int *p3 = NULL; // 需要先 #include cstdlib
     #+END_SRC
     
     建议初始化所有指针
**** 赋值和指针
     

