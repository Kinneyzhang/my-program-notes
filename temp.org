* about json
  * json.load() # 将一个存储在文件中的json对象(str)转化为相对应的python对象
  * json.loads() # 将一个json对象(str)转化为相对应的python对象
  * json.dump() # 将python的对象转化为对应的json对象(str),并存放在文件中
  * json.dumps() # 将python的对象转化为对应的json对象(str)
  * json中的键值必须使用双引号
  * JSON.stringify(obj)将JSON转为字符串
  * JSON.parse(string)将字符串转为JSON格式

* about Django
  * django删除了表的某些记录后，自增的序号乱了怎么办？
  * django中queryset的序列化用serialize方法，其他基本数据类型用json.dumps()
  * 可用queryset的api：list()，将queryset转成python列表

* 数据库
  * 修改表名：ALTER TABLE knowledge_type RENAME TO knowledge_point;
* 论文周记
** 03.29
   初次接触我的这个毕业设计题目的时候，我对整个系统的框架以及功能模块，技术细节等是没有概念的。我只知道我需要搭建前端的页面，需要用到js,css等，我需要用到python来写业务逻辑.....虽然这些技术都没有开设相应的课程，但是只是由于个人兴趣，都差不多有自学过，所以还算有把握。
   寒假里和王老师以及同学们的交流后，让我对整个系统有了初步的概念。寒假里主要进行了技术的准备，学习了vue.js和webpack，使前端页面的搭建更加高效；复习巩固了一下Django用来作为后端的服务器框架。在这个过程中有过很多次抓耳挠腮，苦思冥想，但问题最后都解决了。不得不说从零开始学习一种框架真的是有一定的难度，需要反复的理解与巩固，更何况我学了两个，哈哈。
   开学后的几次交流，我让对这个系统的一些细节有个更加深入的理解，了解了我需要实现哪些功能，比如：前后端通信，上传下载，题库设计，智能推荐，分角色登陆，多线程.....这些就是我接下来要做的事情。
   每一块都需要花很多的时间去研究琢磨，一是之前没有做过，而是要考虑如何和Django，vue结合。刚开学的时候我花了很多的时间去研究前后端的数据通信的问题，百度各种博客，看官方的文档，对照理解，解决了。今天，解决了用户的注册登陆问题，使用axios进行数据请求。接下来的时间不多了，需要抓紧时间去研究接下来的很多功能。
   我相信搭建这个系统的过程会是越来越快，越来越顺畅的。因为前期有很多编码规范以及技术上的问题，所有实现一个小的功能都需要花很多的时间去看官方文档。但是一旦熟悉了，后面编程的过程就很顺畅了。加油！

** 04.14
   最近两周的时间可谓是成果颇丰，完成了文件的上传与下载，数据库表的设计，后台管理模块的设计，以及前端的ui进一步的美化。
   在这个过程中也是遇到了很多的问题，大多数的问题都是因为对Django，vue的某些技术没有熟练掌握。于是去看官方的文档，查阅博客资料试图一一去解决。由于我采用的是前后端分开开发的模式，而vue又是通过虚拟Dom以数据驱动的前端框架，所以数据的传递在开发的过程中非常的重要。无论是前后端通过JSON发送ajax进行通行，还是前端不同组件之间的数据传递以实现对Dom的操作，都需要考虑数据的状态。这一块就涉及到很多的概念和技术，json的使用，序列化，反序列化，vue的refs等。遇到问题就去查阅资料，在这个过程中学到了很多！
   另外一块就是数据库的设计，对于一个系统来说数据库是相当重要的，因为数据库表的字段直接决定着你将要实现的业务功能。用户所看到的系统各种各样易用，人性化的功能，归根结底是对数据库表的增删改查。起初，我根据自己的理解初步设计了相关的数据表，在导师交流的过程了，发现存在很多的问题。首先是，数据字段的命名不规范，我的字段命名大多是比较普适的名字，比如文本就叫'text', 类型就叫'type'等等，这些名字太简单了放在任何地方都适用容易混淆。王老师说应该结合当前的数据库以及专业术语去命名。我修改了一下，瞬间感觉高大上了许多！其次就是字段考虑不全面，除了必要的一些字段外，还需要一些辅助的字段，比如创建时间，修改时间，录题人，各种状态等。我的理解是，数据表字段的自定越细，后面业务逻辑可以实现在功能就越多。最后，就是关于可拓展性的问题。起初我的一些字段是定死在一张表里面的，经过王老师的知道，我发现有的时候需要将一些可拓展的字段单独建立一个子表，这是我一开始没有想到的。除此之外，关于数据库的设计，在技术上我也遇到了一些问题，比如Django的ManyToManyField等，通过查看文档都可以解决。
   最后一块我想说一说前端ui。以前我经常会接受到一些观点：对于学习计算机科学的人来说，搞网站开发，研究前端和ui是一件掉价的事情。事实也是如此，很多计算机科学出身的程序员瞧不起搞前端的，认为html，js根本不能叫做高级语言，研究算法才是正途....
   为此有一断时间我还特别的抵触去学习js，怀疑自己的这个毕设题目是否有价值，毕竟很多其他同学题目都是一些大数据，深度学习，人工智能等等前沿的算法研究。但是当我真正开始接触这一块到渐渐的摸清前端的一些“规则”的时候，我发现我的想法改变了。或许很多人所认知的前端还停留在早年js操作Dom元素以实现动态效果，这种以事件需要的函数式编程。这几年前端发展迅速，angular，react以及vue的出现，让虚拟Dom的概念大行其道。如今你需要去考虑如何操作Dom元素，只需关心页面中的数据的状态，这使得程序员可以将更多的精力放在业务逻辑的开发。伴随着前端框架的流行，很多ui库也开始出现，极大的提高了构建页面的效率，像bootstrap, element ui, vuetify.....
   开始我用的是bootstrap库，但是bootstrap组件的操作是依赖Jquery，还是要操作Dom，这和vue数据驱动的理念背道而驰。于是放弃了，现在使用为vue量身打造的vuetify。这样，我的技术栈就清晰了。后端用Django，前端用Vue.js + vuetify。期待接下来的实践！

** 05.06
   最近一段时间也是进展很多。遇到了很多的问题，实现了很多的功能，也有很多的体会！
   中期检查结束后，我感觉自己做的这个系统的功能模块有点少，于是便和导师交流了一下。通过和导师的交流以及自己的思考，最终确定系统的主要功能模块有：试题上传下载模块，练习记录管理模块，讨论板模块，学习视频管理模块，个人信息模块，智能推荐模块等。
  我是想要把这个毕业设计给做好的，所以提前做了很多的准备，包括前期Django,vueJs框架的学习，过程中vuetify的学习。但是在真正实践的过程中遇到了很多的问题。简单的总结就是：受益于框架便利的同时也受限于框架。这里说的限制不是指在完成效果上框架有什么局限，而是新的框架的学习成本限制了开发的效率。前期我学习了很多新知识，了解了基本的原理和使用方法，但是在使用的过程中会遇到很多实际的问题。这些问题如果使用原生的前端知识来解决可能相对简单，但是在框架内，你需要去重新学习并理解它的一套逻辑。理解了自然就会很方便的应用于后续类似问题的解决，但是这个学习的过程就够你折腾一段功夫了。很开心，我一直折腾过来了！
  举个例子，这段时间让我花了很大功夫的一块就是数据库。因为Django使用了ORM，关系对象模型映射，我需要使用框架的逻辑书写python代码来完成对数据库的增删改查。如果只是简单的增删改查，那倒也简单。问题是随着业务逻辑越来越复杂，对数据库的操作也变得复杂起来，这中间涉及到外键，两个模型之间多对多关系，中间表，子表，字段间的关系约束等等。这就复杂了，我查了很多的资料博客，用python shell模拟了很多次终于一个个解决了问题。最后绕了一圈，发现最全，最详细的信息还是得看官方文档或出版书籍。这个过程也让我对python的基本数据类型的操作使用的更加得心应手了。
  最大的感悟是对“数据”的处理。以前的前端可能关注点在Dom元素，是vueJs是数据驱动的。可以说无论前端后端，最终都是和数据打交道。数据如何存储，何时处理，怎么处理，以何种方式呈现，就是我在整个开发过程中一直需要考虑的问题。根据并不长时间的实践经验，我的理解是：数据库中存放的是需要一直使用的数据；sessionStorage, localStorage存储的是在应用运行时的临时状态信息，刷新页面状态保持；vuex存储的是不同vue组件间共享的信息，刷新页面状态会消失。和页面展示相关的数据交给前端处理，前端优先考虑vue的原生技术，vue本身无法很好的处理，交给javascript。和数据库打交道的数据交给后端用python处理。前后端数据传输使用json，注意序列化与反序列化。vue的data实例中的数据在不同的作用域无法共享，需要使用sessionStorage或localStorage。在前端data需要简单处理时，优先使用计算属性computed......
  上面总结的这些内容，都是在实践过程中遇到的一个个坑，花了我或多或少的时间去填补。
  还遇到的一个坑就是前端列表循环时，每个循环组件都必须指定一个key，这意味着在循环中使用input元素时，v-model的绑定也必须是动态的。一开始我没有注意到这个问题，导致栈溢出，内存压力直接拉满。以前谁能想过，写个前端页面还要考虑栈溢出的问题，哈哈。
  最后一段时间继续完善系统还有推荐算法，抓紧时间写论文！

** 05.30
   经过近一个月，答辩终于结束了，也到了最后需要提交论文的时候。这一个月的时间里面，和导师多次见面交流，提出了许多问题并修改。让王老师操心了！
   以前的我对论文研究没有概念，经过这一个月的论文写作的过程，让我熟悉了基本的流程，明白了论文的每一个部分，每一个环节都是有意义的。就像软件工程，初学者的认知中不会有需求分析、概要设计、系统测试这些概念。初学者会认为这些都是“表面文章”，头脑中有了一个思路直接敲代码才是最有效率的。这对于小的程序或许能节省很多的时间，但对于大的项目有诸多的弊端。没有需求分析如何知道系统需要实现哪些功能模块？初学者会说，我当然知道要实现哪些功能模块，已经在脑海中构思好了。好的，这没问题，但这只是你认为的需求，用户真的需要这些吗？是不是考虑并不全面？除了用户的需求，有没有考虑非功能性的需求？技术安全方面呢？可拓展性如何？做测试了吗？......这一系列的问题抛出来，初学者懵逼了，原来系统开发还有这么多的学问。其实不只软件系统开发，任何大的项目工程，都是不一蹴而就的。青藏铁路，三峡大坝，南水北调...这些国家级的工程哪个不是经历数年的验证研究才真正得以实施。可见，前期的论证分析必不可少，因为工程要做的不是一个自娱自乐的玩具，而是需要对自己对他人负责的项目。
   毫无疑问，在整个毕业设计的过程了，我就是这样的一个“初学者”，虽然我们所做的工作还远远达不到工程的难度。起初，知道自己要做一个系统，但是对这个系统没有概念，知道了系统的定位以及核心功能，但是没有更全面的思考其他需求。后来觉得实现的功能模块太少，才去思考这个问题。写论文的过程中也对一些概念有些混淆。这些都是前期没有研究透彻需求的原因。论文同样如此，一开始的开题报告现在想来还是很重要的。开题报告让我们了解论文研究的背景意义目的，其实就是在给论文的研究内容指明正确的方向。不提前了解清楚这些，就会导致文章主题不明确。技术分析让我们了解论文采用的技术特点与功能，为读者读懂后面的具体实现做铺垫。需求分析就像前面说的很重要，决定着系统需要实现的功能。具体的实现则是核心，完成了哪些工作、重要的算法流程、结果界面的等。
   总之，经过这次毕业设计以及毕业论文的撰写让我这个“初学者”收获很多，至少现在不再是初学者。学了新技术，也对论文研究、系统开发有了自己的理解。
   我一直对计算机方面新的技术很有兴趣也乐于去自学。每当发现做的很漂亮的技术、软件和解决方案就会很兴奋，有的时候一头钻进去竟忘了吃饭。我很清楚这是很好的一种学习的状态，但是有的时候确实会因此耽误事情。事情都有主次之分与轻重缓急，你感兴趣的内容可能并不一定重要，真正紧急的事情可能并不让你感冒。但是该做的事情还是得做，做就要做好。我认为这次毕业设计我做的并不好，首先让老师操心很多，其次自己也很难受，总是在被各种deadline推着前进。希望未来的自己会变得更好。BTW，王老师辛苦了！

* 毕业设计
** 代码片段
  #+BEGIN_SRC python
    # 每页显示10条
    list_per_page = 10

    # 可编辑字段
    list_editable = ('auth',)

    # 设置哪些字段可以点击进入编辑界面
    list_display_links = ('title', 'body')

`    # 过滤器
    list_filter = ('auth', 'title')

    # 时间分层
    date_hierarchy = 'create_time'
  #+END_SRC

** 具体任务
   * formdata传输文件时带上用户信息
   * 登陆后界面header的变化
   * 修改主界面ui，文字展开，样张等
   * 学生个人信息，练习情况界面
   * 上传文件夹的分类
   * 处理题目与知识点的多对多关系
   * model methods, 模型内的条件约束

*** 功能模块的设计
**** 头脑风暴
     * 用户分级头衔，推荐不同难度题目
     * 试题下载次数，难度，正确率等
     * 试题的讲解tip，与用户关联
     * 讨论版
     * 提供历年计算机等级考试真题

* 参考文献
  * [[http://f.wanfangdata.com.cn/www/融合用户评分和项目属性的协同过滤推荐算法.ashx?isread=true&type=degree&resourceId=D01345538&transaction=%7B%22id%22%3Anull%2C%22transferOutAccountsStatus%22%3Anull%2C%22transaction%22%3A%7B%22id%22%3A%221118126089089081344%22%2C%22status%22%3A1%2C%22createDateTime%22%3Anull%2C%22payDateTime%22%3A1555417008074%2C%22authToken%22%3A%22TGT-556886-fGB5pgb0Fyl9pppckijKCtcfcRoEcBZx5chIqgcAG3wfpCQBrN-my.wanfangdata.com.cn%22%2C%22user%22%3A%7B%22accountType%22%3A%22Group%22%2C%22key%22%3A%22njsfdxtsg%22%7D%2C%22transferIn%22%3A%7B%22accountType%22%3A%22Income%22%2C%22key%22%3A%22ThesisFulltext%22%7D%2C%22transferOut%22%3A%7B%22GTimeLimit.njsfdxtsg%22%3A30.0%7D%2C%22turnover%22%3A30.0%2C%22orderTurnover%22%3A30.0%2C%22productDetail%22%3A%22degree_D01345538%22%2C%22productTitle%22%3Anull%2C%22userIP%22%3A%22153.3.61.121%22%2C%22organName%22%3Anull%2C%22memo%22%3Anull%2C%22orderUser%22%3A%22njsfdxtsg%22%2C%22orderChannel%22%3A%22pc%22%2C%22payTag%22%3Anull%2C%22webTransactionRequest%22%3Anull%2C%22signature%22%3A%22Bzip%2F7Nbzb%2FH8BI%2BgUdFF6Gocy42LY7NqqiNVDsyg3kyZK9MVd818l9Xn5obDetJHP7iD0lxSTh0%5CnG4U6sh5fqoTNwRxqCHizP7bKfI6EWZBBDlK%2BF0o8sVJI2YenYlnpoNEE9opcpvd7tsdYLeiG5FCM%5CnIHvl8XNGbMSEjwbzEgA%3D%22%2C%22delete%22%3Afalse%7D%2C%22isCache%22%3Afalse%7D][融合用户评分和项目属性的协同 过滤推荐算法]]
  *
* Centos运维相关
** 防火墙
   * systemctl start firewalld
   * systemctl status firewalld
   * systemctl stop firewalld
   * firewall-cmd --list-services //查看防火墙允许的服务
   * firewall-cmd --add-service=ftp --permanent //永久开放ftp服务
   * firewall-cmd --add-port=21/tcp --permanent //允许外网访问
   * firewall-cmd --reload //重新载入配置  
* temp
  试题练习模块涉及的流程包括：用户下载操作题素材，用户上传答案文件，系统批阅答案。
  用户可以进入题库界面可以浏览最近发布的题目。选择试题分类中的不同试题类型，可以浏览该试题类型的知识点综合试题。点击每个题型中的知识点专项可以浏览知识点转项练习。确定需要练习的试题后，点击试题右边的下载图标，即可下载该试题素材文件到本地。素材的文件名默认为试题的编号。

  为了保证试题名称的唯一性，管理员在上传试题时，系统会根据该试题的特征生成一个试题唯一编号。该编号为7位，第一位字母代码试题类型，"w"代表word操作题，“e”代表excel操作题，"p"代表PPT操作题；第二位数字代表试题难度，分三个等级，分别为1、2、3，难度依次递增；第三位字母代表试题的知识点数，“s”代表该试题为专项知识点，"c"代表综合知识点。后四位为该试题在同类试题中的id号，依次递增。试题编号的作用除了避免文件重名，还可以作为试题的唯一标识，方便用户区分不同试题，也为开发者获取试题相关特征信息提供了方便。试题标号设计的代码如下。

系统会根据每道试题用户练习的得分情况计算正确率。具体的算法流程为：
(1) 遍历所有试题，没有练习记录或者没有批阅的试题的正确率为100%。
(2) 获取所有已经批阅的试题练习记录，遍历该记录查询集合，用试题得分除以试题总分，累加后除以记录条数，得到平均正确率。
* 链接
  * [[http://www.yinwang.org/blog-cn/2012/05/18/user-friendliness][什么是对用户友好--王垠]]
