* struts笔记
** 原理：
    * 浏览器向web服务器发送请求
    * web服务器根据url解析 主机，web应用名称，资源
    * 将请求转发给 ActionServlet(总控制器)
    * 总控制器查找 struts-config.xml(配置了action和actionForm,以及两者对应关系等)
    * 查询完后，把数据填充到actionForm中，调用指定的action类
    * action类从actionForm中获取数据，调用某个model完成任务，返回执行结果给ActionServlet
    * ActionServlet查询struts-config.xml,根据结果返回静态页面给浏览器

    * attention:
      * 核心是总控制器与struts配置文件，总控屏蔽了“将数据填充到表单和让action类从表单获取数据”的细节。
      * struts配置文件：
        配置表单的name和type(全路径)
        配置action类的path(/login),name(name表示对应的表单的name)和type(全路径)
        配置跳转关系，name(结果名称)，path(跳转页面url)
      * 在web.xml中配置总控制器
      * html表单中action的url默认为"/action_path.do"文件
      * action类中返回mapping.findForward(name),总控通过 name 的值查找struts的配置文件确定调转的url
        
* hibernate笔记
** 原理
   * hibernate是对jdbc进行轻量级封装的orm框架，处于项目的持久层。
   * 对象关系映射文件：用于指定domain对象与与表的映射关系，每个domain都有"对象名.hbm.xml"文件。
   * domain对象需要序列化，可以唯一标识，方便在网络传输：实现java.io.Serializale接口。
   * hibernate.cfg.xml 用于指定链接数据库类型，driver,用户名，密码，url等，并管理关系对象映射文件。
   * 使用hibernate接口操作持久层：(完全面向对对象，不用写jdbc代码)
     * 创建Configuration：Configuration configuration = new Configuration().configure();
     * 创建SessionFactory：SessionFactory sessionFactory = configuration.buildSessionFactory();
     * 创建Session：Session session = sessionFactory.openSession();
     * 对于增删改必须采用 事务 提交：Transaction transaction = session.beginTransaction();
     * 插入 对象并保存,提交事务，关闭session：session.save(obj); transaction.commit(); session.close();
     * 修改 对象信息：Employee emp = (Employee) session.load(Employee.class, 3); emp.setName("kinney"); 
     * 删除 对象信息：emp.delete();
     * 查询 对象信息：使用hql语句。
   * 在开发项目时，要保证SessionFactory单态(一个数据库一个)，单独在util包中创建静态类和方法。
    
//看到第六讲21:00

* spring笔记
** 概念：
   * spring是一个容器框架，可以配置各种bean(action,service,domain,dao)，并维护bean与bean之间的关系，可以通过getBean(id)获取
   * ioc(inverse of control):控制反转，把创建bean和维护bean的关系的权利从程序中转移到spring容器中(applicationContext.xml)
   * di(dependency injection):依赖注入，和ioc是同一个概念，设计者认为di更准确的体现spring的核心

** 开发流程
   * 引入开发包：spring.jar,common-logging.jar
   * 创建spring核心文件：applicationContext.xml，一般放在src文件夹下
   * 配置bean
   * AplicationContext是一个重量级的类，需要保证单态:创建ApplicationContextUtil工具类
