* git-command
  * git init 初始化仓库
  * git config (--global) user.name 'Kinney' 配置文件
  * cat .gitconfig 查看配置文件
  * cat .git/config
  * git checkout -f HEAD 找回文件
  * git add <file>
  * git commit -m "commit message" 提交更改的文件
  * git hash-object main.c 计算 hash 值
  * find .git/objects/ -type f 列出 object 中所有文件。
  * git cat-file -t（hash 值）列出文件类型
  * git show (hash 值) 显示某个 hash 文件的内容

  * git commit -a -m "commit meessage" 一键提交
  * git tag v1.0 打标签，stag 引用
  * git tag -a v1.0 -m "this is first tag object" 创建 tag 对象
  * git archive --format=tar --prefix=ruby/ v1.0 | gzip > /tmp/ruby1.0.tar.gz  根据 tag 提取文件

  * git branch 查看分支
  * git branch <分支名> 创建分支
  * git checkout <分支名> 切换分支
  * git merge <分支名：合并到另一个> 合并分支
  * git branch -D <分支名> 删除分支

  * git remote add origin https://github.com/Kinneyzhang/.emacs.d.git
  * git push -u origin master

  * 相同内容的文件只保存一份，因为文件内容与名称分开存储。内容存在 blob 中，名称存在 tree 中。
  * commit 文件与 tree 对应，commit 链表保存历史记录。
  * HEAD 始终指向当前活动分支
