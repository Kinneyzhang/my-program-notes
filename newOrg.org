(current-buffer)
?\d
(lsh 5 1) 位运算，数字5左移1位
x(ash -5 -2) ??
(round 1.2)
(% 9 3)
(mod 9 3)
(sin 0.5)
(random 666)

;;string 
(string-width "qdqferfw 11 ")
(stringp "qqw") (string-or-null-p nil) (char-or-string-p ?w)
(make-string 5 ?4) (string 1 ?a ?1) (substring "qwdwecwed" 1 5) (substring "qwertxwscedc" 3 nil) (substring "qwertyu" -4 -1)
(concat "hello " "emacs" "!")
(split-string " hello emacs ! ")
(split-string " hello  emacs ! "
	      split-string-default-separators)
(split-string "Soup is good food !" "o") (split-string "Soup is good food !" "o+")
(split-string "Soup is good food !" "" t)

(char-equal 11 11)
(string= "qwe" "qw") (string-prefix-p "qw" "qwed23") (string-suffix-p "df" "14wdefdf")
(compare-strings "qwxr123" 1 4 "qwx2123" 1 4)
(number-to-string 1344) (string-to-number "123") (char-to-string ?S) (string-to-char "w")
(append "1" "q" "ww" "12")
(format-message "the buffer name is %s" (current-buffer))
(format "%2$d %1$d %3$s" 3 1 "q")

(downcase "Emacs is VERY cool!") (upcase "Emacs is VERY cool!")
(capitalize "EMACS is very cool") (upcase-initials "EMACS is very cool")

;;case table
(current-case-table)

;;;========================Lists=========================
(consp '(1 2 3)) (consp nil)
(atom '123) (not (consp 'qwe)) (atom nil)
(listp '(q 1 3))
(null '())
(car '(a b c))
(cdr '(a b c))
(car-safe '123) (cdr-safe 'qwe) ;;非cons不报错，显示nil
(let ((x '(1 2)))
  (if (consp x)
      (car x)
    nil))

(caar '((a b) c d)) (cadr '(a b c d)) (cdar '((a b c) d e)) (cddr '(a b c e))

(setq list '(a b c))
(pop list)
list

(setq list '(x y z))
(push 'c list)
list

(nth 2 '(a b cx d))
(nthcdr 2 '(a b c d e))
(last '(a b c))

(butlast '(a b c d))
(safe-length '(a b c de))

(cons 'x '(a b c)) (cons 1 2) (cons 1 ())
(list 1 2 '(a b) 3 4) (make-list 3 'pigs)

(append '(a b c) 'x)

(number-sequence 2 8 2)
(number-sequence 8 2 -1)

(setq foo '(1 2 3))
(add-to-list 'foo 4)
foo

(add-to-ordered-list 'foo 's 4)

;;5.6 Modifying Existing List Structure
(setq x '(a b c))
(setcar x 'd)
x
;memq member delete remove

;;6.Sequences
(elt '(a b c d) 2) ;2 is a index ;??eq和equal的区别
(setq x '(1 2 3 4))
(reverse x)
x
(nreverse x)

(setq y [1 2 3 4])
(nreverse y)
y

;; cursor
(point)
(region-beginning)
(region-end)
(point-min)
(point-max)
(goto-char 2200)
(forward-char 9)
(backward-char 12)
(beginning-of-line)
(end-of-line)
(search-forward "cat")
cat
(search-backward "cat")
(skip-chars-forward "emacs")emacs
; 保证光标位置不变
(save-excursion
  (goto-char 1111))
(save-restriction
  (narrow-to-region 2517 2525))

;;text editing
(insert "hello")
(delete-char 10)
(delete-region 2576 2578)
(erase-buffer)
(delete-and-extract-region 2617 2625);return the deleted text

;;get buffer string
(buffer-substring-no-properties 111 222)
(current-word)

(my-get-word)

(defun my-get-word ()
  "print the word under cursor.
Word here is any A to Z, a to z, and low line _"
  (interactive)
  (let (
	p1
	p2
	(case-fold-search t))
    (save-excursion
      (skip-chars-backward "_a-z0-9" )
      (setq p1 (point))
      (skip-chars-forward "_a-z0-9" )
      (setq p2 (point))
      (message "%s" (buffer-substring-no-properties p1 p2)))))

;;buffer
(buffer-name)
(buffer-file-name)
(with-current-buffer "views.py")
(save-current-buffer
  ;; switch to myBuf
  (set-buffer "views.py")
  ;; do stuff, such as insert/delete text  
  )
(with-temp-buffer
  (insert "this is a temp buffer")
  (message "%s" (buffer-string)))

(setq BufferName " newBuf")
(setq newBuf (generate-new-buffer BufferName))
(set-buffer newBuf)

(setq newBuf1 (get-buffer-create " buff1"))
(set-buffer newBuf1)
(kill-buffer newBuf1)

;;read/write file
(find-file "./newOrg.org")
(write-region (point-min) (point-max) "./newOrg.org")
(save-buffer)
(write-file "./newOrg.org")
